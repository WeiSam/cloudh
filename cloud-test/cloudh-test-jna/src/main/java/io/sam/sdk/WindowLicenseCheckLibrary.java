package io.sam.sdk;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.win32.StdCallLibrary.StdCallCallback;
import java.nio.ByteBuffer;
/**
 * JNA Wrapper for library <b>LicenseCheck_FOR_WIN</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface WindowLicenseCheckLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "LicenseCheck_FOR_WIN";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(WindowLicenseCheckLibrary.JNA_LIBRARY_NAME);
	public static final WindowLicenseCheckLibrary INSTANCE = (WindowLicenseCheckLibrary)Native.loadLibrary(WindowLicenseCheckLibrary.JNA_LIBRARY_NAME, WindowLicenseCheckLibrary.class);
	/**
	 * <i>native declaration : LicenseCheck.h</i><br>
	 * enum values
	 */
	public static interface EnumCheckResult {
		/** <i>native declaration : LicenseCheck.h:28</i> */
		public static final int E_CHECK_FAIL = -1;
		/** <i>native declaration : LicenseCheck.h:29</i> */
		public static final int E_CHECK_SUCCESS = 0;
		/**
		 * \u6ca1\u6709\u627e\u5230\u5bf9\u5e94License<br>
		 * <i>native declaration : LicenseCheck.h:30</i>
		 */
		public static final int E_CHECK_NO_LICENSE = 1;
		/**
		 * \u8d85\u8fc7\u6709\u6548\u671f<br>
		 * <i>native declaration : LicenseCheck.h:31</i>
		 */
		public static final int E_CHECK_OUT_OF_DATE = 2;
		/**
		 * \u7cfb\u7edf\u65f6\u95f4\u88ab\u5f80\u56de\u4fee\u6539<br>
		 * <i>native declaration : LicenseCheck.h:32</i>
		 */
		public static final int E_CHECK_SYSTEM_TIME_IS_MODIFIED = 3;
		/**
		 * \u6ce8\u518c\u8868\u4e2d\u8bb0\u5f55\u7684\u65f6\u95f4\u88ab\u5220\u9664<br>
		 * <i>native declaration : LicenseCheck.h:33</i>
		 */
		public static final int E_CHECK_REGISTRY_TIME_IS_DELETED = 4;
		/**
		 * \u6ce8\u518c\u8868\u4e2d\u8bb0\u5f55\u7684\u65f6\u95f4\u88ab\u4fee\u6539<br>
		 * <i>native declaration : LicenseCheck.h:34</i>
		 */
		public static final int E_CHECK_REGISTRY_TIME_IS_MODIFIED = 5;
	};
	/** <i>native declaration : LicenseCheck.h</i> */
	public static final String LC_KEY_VIDEONUM = (String)"videonum";
	/** <i>native declaration : LicenseCheck.h</i> */
	public static final String LC_KEY_VALIDDATE = (String)"validdate";
	/** <i>native declaration : LicenseCheck.h</i> */
	public static final String LC_KEY_GENERATETIME = (String)"generateTime";
	/** <i>native declaration : LicenseCheck.h</i> */
	public interface CheckEventCbFunc extends StdCallCallback {
		void apply(int eResult, Pointer pUserData);
	};
	/**
	 * szValiddateKey:\u6709\u6548\u671f\u5173\u952e\u8bcd\uff0c\u9ed8\u8ba4\u662fvaliddate<br>
	 * Original signature : <code>EnumCheckResult GS_LC_Init(char*, char*)</code><br>
	 * <i>native declaration : LicenseCheck.h:48</i><br>
	 * @deprecated use the safer methods {@link #GS_LC_Init(ByteBuffer, ByteBuffer)} and {@link #GS_LC_Init(Pointer, Pointer)} instead
	 */
	@Deprecated 
	int GS_LC_Init(Pointer szPath, Pointer szValiddateKey);
	/**
	 * szValiddateKey:\u6709\u6548\u671f\u5173\u952e\u8bcd\uff0c\u9ed8\u8ba4\u662fvaliddate<br>
	 * Original signature : <code>EnumCheckResult GS_LC_Init(char*, char*)</code><br>
	 * <i>native declaration : LicenseCheck.h:48</i>
	 */
	int GS_LC_Init(ByteBuffer szPath, ByteBuffer szValiddateKey);
	/**
	 * \u53cd\u521d\u59cb\u5316<br>
	 * Original signature : <code>void GS_LC_Cleanup()</code><br>
	 * <i>native declaration : LicenseCheck.h:51</i>
	 */
	void GS_LC_Cleanup();
	/**
	 * \u8bbe\u7f6e\u6709\u6548\u65f6\u95f4\u6821\u9a8c\u4e8b\u4ef6\u56de\u8c03<br>
	 * Original signature : <code>void GS_LC_SetCheckEventCb(CheckEventCbFunc, void*)</code><br>
	 * <i>native declaration : LicenseCheck.h:54</i>
	 */
	void GS_LC_SetCheckEventCb(CheckEventCbFunc func, Pointer pUserData);
	/**
	 * iCheckInterval:\u6821\u9a8c\u95f4\u9694(\u5355\u4f4d\u79d2)<br>
	 * Original signature : <code>EnumCheckResult GS_LC_Start(int)</code><br>
	 * <i>native declaration : LicenseCheck.h:58</i>
	 */
	int GS_LC_Start(int iCheckInterval);
	/**
	 * \u505c\u6b62\u68c0\u9a8c\u6709\u6548\u65f6\u95f4<br>
	 * Original signature : <code>void GS_LC_Stop()</code><br>
	 * <i>native declaration : LicenseCheck.h:61</i>
	 */
	void GS_LC_Stop();
	/**
	 * \u6821\u9a8c\u5176\u4ed6\u5177\u4f53\u9879<br>
	 * Original signature : <code>EnumCheckResult GS_LC_GetValue(const char*, char*, int)</code><br>
	 * <i>native declaration : LicenseCheck.h:64</i><br>
	 * @deprecated use the safer methods {@link #GS_LC_GetValue(String, ByteBuffer, int)} and {@link #GS_LC_GetValue(Pointer, Pointer, int)} instead
	 */
	@Deprecated 
	int GS_LC_GetValue(Pointer szKey, Pointer szValBuf, int iBufLen);
	/**
	 * \u6821\u9a8c\u5176\u4ed6\u5177\u4f53\u9879<br>
	 * Original signature : <code>EnumCheckResult GS_LC_GetValue(const char*, char*, int)</code><br>
	 * <i>native declaration : LicenseCheck.h:64</i>
	 */
	int GS_LC_GetValue(String szKey, ByteBuffer szValBuf, int iBufLen);
}
