
package io.sam.webservice.jdk;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * <a href="http://www.webxml.com.cn/" target="_blank">WebXml.com.cn</a> <strong>中文简体字<->繁体字转换 WEB 服务</strong><br />此中文简体字<->繁体字转换Web Services请不要用于任何商业目的，若有需要请<a href="http://www.webxml.com.cn/zh_cn/contact_us.aspx" target="_blank">联系我们</a>，欢迎技术交流。 QQ：8409035<br /><strong>使用本站 WEB 服务请注明或链接本站：http://www.webxml.com.cn/ 感谢大家的支持</strong>！<br /><br />&nbsp;
 * 
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "TraditionalSimplifiedWebService", targetNamespace = "http://webxml.com.cn/", wsdlLocation = "http://ws.webxml.com.cn/WebServices/TraditionalSimplifiedWebService.asmx?wsdl")
public class TraditionalSimplifiedWebService
    extends Service
{

    private final static URL TRADITIONALSIMPLIFIEDWEBSERVICE_WSDL_LOCATION;
    private final static WebServiceException TRADITIONALSIMPLIFIEDWEBSERVICE_EXCEPTION;
    private final static QName TRADITIONALSIMPLIFIEDWEBSERVICE_QNAME = new QName("http://webxml.com.cn/", "TraditionalSimplifiedWebService");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("http://ws.webxml.com.cn/WebServices/TraditionalSimplifiedWebService.asmx?wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        TRADITIONALSIMPLIFIEDWEBSERVICE_WSDL_LOCATION = url;
        TRADITIONALSIMPLIFIEDWEBSERVICE_EXCEPTION = e;
    }

    public TraditionalSimplifiedWebService() {
        super(__getWsdlLocation(), TRADITIONALSIMPLIFIEDWEBSERVICE_QNAME);
    }

    public TraditionalSimplifiedWebService(WebServiceFeature... features) {
        super(__getWsdlLocation(), TRADITIONALSIMPLIFIEDWEBSERVICE_QNAME, features);
    }

    public TraditionalSimplifiedWebService(URL wsdlLocation) {
        super(wsdlLocation, TRADITIONALSIMPLIFIEDWEBSERVICE_QNAME);
    }

    public TraditionalSimplifiedWebService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, TRADITIONALSIMPLIFIEDWEBSERVICE_QNAME, features);
    }

    public TraditionalSimplifiedWebService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public TraditionalSimplifiedWebService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns TraditionalSimplifiedWebServiceSoap
     */
    @WebEndpoint(name = "TraditionalSimplifiedWebServiceSoap")
    public TraditionalSimplifiedWebServiceSoap getTraditionalSimplifiedWebServiceSoap() {
        return super.getPort(new QName("http://webxml.com.cn/", "TraditionalSimplifiedWebServiceSoap"), TraditionalSimplifiedWebServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TraditionalSimplifiedWebServiceSoap
     */
    @WebEndpoint(name = "TraditionalSimplifiedWebServiceSoap")
    public TraditionalSimplifiedWebServiceSoap getTraditionalSimplifiedWebServiceSoap(WebServiceFeature... features) {
        return super.getPort(new QName("http://webxml.com.cn/", "TraditionalSimplifiedWebServiceSoap"), TraditionalSimplifiedWebServiceSoap.class, features);
    }

    private static URL __getWsdlLocation() {
        if (TRADITIONALSIMPLIFIEDWEBSERVICE_EXCEPTION!= null) {
            throw TRADITIONALSIMPLIFIEDWEBSERVICE_EXCEPTION;
        }
        return TRADITIONALSIMPLIFIEDWEBSERVICE_WSDL_LOCATION;
    }

}
